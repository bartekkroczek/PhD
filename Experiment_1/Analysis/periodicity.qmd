---
title: "Periodicity"
author: "Bartek Kroczek"
format: html
editor: source
---
```{r}
library(tidyverse)
library(ggplot2)
library(papaja)
library(WaveletComp)
library(patchwork)
```


```{r}
#| label: load-data
#| include: false

data.names <-
  list.files('../Data', full.names = T, pattern = '*.csv$')
data.files <- read_csv(data.names)
```

```{r}
#| include: false
data.aggr <-
  data.files |>
  filter(Trial_type == "experiment", Rt > 0.0) |> # Experiment and no timeout
  select(PART_ID, CSI, Corr) |>
  mutate(t = CSI * 16.6) |>
  group_by(PART_ID, t) |>
  summarise(mean_corr = 100.0 * mean(Corr)) 
```

```{r}
#| echo: false
data.aggr |> 
  filter(PART_ID == "140M21") |>
  ggplot(mapping = aes(x=t, y=mean_corr/100.0)) +
  geom_point() +
  geom_line() + 
  geom_smooth(method='lm', formula = y ~ x) +
  ggtitle("Single participant data", 
          subtitle = "Blue line represents linear regression fitted to data") + 
  scale_y_continuous(labels = scales::percent) +
  labs(x = "PDI in [ms]", y = "Average correctness") +
  theme_apa()
```

## Ljubng box formal testng

```{r}
# Group by participant and nest data
nested_data <- data.aggr %>%
  arrange(PART_ID, t) %>%
  group_by(PART_ID) %>%
  nest()

# Define a function to detrend and perform the Ljung-Box test
process_data <- function(df) {
  # Polynomial Detrending
  fit <- lm(mean_corr ~ poly(t, 1), data = df)
  df$detrended_mean_corr <- residuals(fit)
  
  # Ljung-Box test on the detrended series
  test_result <-
    Box.test(df$detrended_mean_corr, type = "Ljung-Box")
  
  # Return a tibble with the results
  tibble(
    p_value = test_result$p.value,
    statistic = test_result$statistic,
    lag = test_result$parameter,
    method = test_result$method
  )
}

# Apply the function to each nested dataframe
ljung_box_results <- nested_data %>%
  mutate(results = map(data, process_data)) %>%
  select(-data) %>%
  unnest(results) %>%
  ungroup()

# Adjust p-values for multiple comparisons
ljung_box_results <- ljung_box_results %>%
  mutate(adjusted_p_value = p.adjust(p_value, method = "BH"))


# View the results
print(ljung_box_results)
```
Benjamini-Hochberg (BH) is more suitable for exploratory research where you are dealing with a large number of independent tests

```{r}
# How many participants has significant values 
ljung_box_results |> 
  summarise(
  Significant_Raw = sum(p_value < 0.05),
  Significant_Adjusted = sum(adjusted_p_value < 0.05))
```

## Wavelet Transform

```{r}
# Wybieramy osobę badaną do wizualizacji
random_part_id <- data.aggr$PART_ID |> unique() |> sample(1)
# random_part_id <- "97K21" # całkiem dużo widać
# random_part_id <- "59K22" # też sporo, acz nieco gorzej
# random_part_id <- "106M23" # trzy wyraźne wyspy 
# random_part_id <- "146M21" # marnizna raczej
# random_part_id <- "40K24" # globalna wolna fala powyżej 200ms i jeden peak
# random_part_id <- "37K24" # jeden peak, reszta płaska
# random_part_id <- "36K20" # dwa peaki, reszta płaska
# random_part_id <- "91M22" # trzy spore peaki, troche płaska reszta
# random_part_id <- "118K23" # idealna wolna fala na całości 
# random_part_id <- "96K22" # płasciutko i zawirowanie na końcu 
# random_part_id <- "75K22" # wolna faza na całości, trochę szumu na początku
print(random_part_id)
```
```{r}

# detrending poprzez odjęcie wielomianu stopnia 2
my.data <- data.aggr |> filter(PART_ID == random_part_id) |> arrange(t)
fit <- lm(mean_corr ~ poly(t, 2), data = my.data)
my.data$mean_corr <- residuals(fit)

my.data <- data.frame(time = my.data$t, x = my.data$mean_corr)

my.w <- analyze.wavelet(my.data, "x",
loess.span = 0,
dt = 1, dj = 1/60,
lowerPeriod = 1,
upperPeriod = 16,
make.pval = TRUE, n.sim = 200)

```

```{r}
# Z JAKIEGOŚ DZIWNEGO POWODU P VALUE JEEST USTALONE NA P=0.1
wt.image(
  siglvl = 0.05, 
  plot.ridge = FALSE,
  plot.legend = FALSE,
  my.w,
  color.key = "quantile",
  n.levels = 250,
  # legend.params = list(lab = "wavelet power levels", mar = 4.7),
  timelab = "PDI in [ms]",
  periodlab = " Period in [data points per cycle]",
  spec.time.axis = list(at = seq(0, 48, by = 12),
                        labels = seq(200, 1000, by = 200)),
  # spec.period.axis = list(at = c(1, 2, 4, 8, 16), labels = c(16, 8, 4, 2, 1))

)
```

```{r}
reconstruct(
  my.w,
  plot.waves = FALSE,
  lwd = c(1, 2),
  legend.coords = "bottomleft",
  only.sig = TRUE,
  spec.time.axis = list(at = seq(0, 48, by = 12),
                        labels = seq(200, 1000, by = 200)),
    timelab = "PDI in [ms]"
)
```


## Peridogram

```{r}

# Plot the periodogram
spectrum(my.data, main = "Periodogram of Time Series Data")

# If you prefer a ggplot2 style plot, you can extract the spectral data and plot it manually
spectral_data <- spectrum(my.data$x, plot = FALSE)
spectral_df <-
  as_tibble(list(frequency = spectral_data$freq, spectrum = spectral_data$spec))

# Plot using ggplot2
ggplot(spectral_df, aes(x = frequency, y = spectrum)) +
  geom_line() +
  theme_apa() +
  labs(x = "Frequency", y = "Spectral Density", title = "Periodogram of Time Series Data")

```



